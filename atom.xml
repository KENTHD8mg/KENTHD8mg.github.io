<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KENTHD8mg</title>
  
  <subtitle>as a excited newbird geeker forever</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KENTHD8mg.github.io/"/>
  <updated>2019-10-05T18:50:58.000Z</updated>
  <id>http://KENTHD8mg.github.io/</id>
  
  <author>
    <name>KENT</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CodeReview实践的目的</title>
    <link href="http://KENTHD8mg.github.io/2019/10/06/codeReview-best-practices/"/>
    <id>http://KENTHD8mg.github.io/2019/10/06/codeReview-best-practices/</id>
    <published>2019-10-05T18:19:04.000Z</published>
    <updated>2019-10-05T18:50:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><a name="8f9rJ"></a><br>在敏捷开发实践中，CodeReview作为代码检查过程中比较重要的一个环节，在各团队里都有不错的实践。打算结合自己团队的实践写一篇关于CodeReview完整的最佳实践的建议，发现周末时间不够，就改成CodeReview实践中的几个问题，还是不够最后改成CodeReview实践的目的，把丰满的理想先暂存在心里，有空补上。<br><a name="Qimse"></a></p><h2 id="目的和意义"><a href="#目的和意义" class="headerlink" title="目的和意义"></a>目的和意义</h2><p>团队在开始CodeReview实践过程中，容易遗漏在团队里对CodeReview的目标建立统一的认识。为了避免拿到代码就开始缺乏目标的尽量找缺陷的游戏，我们这里试图去建立一些准则，让我们的CodeReview实践有据可依。<br><a name="bMgFv"></a></p><h3 id="持续保持代码的健康"><a href="#持续保持代码的健康" class="headerlink" title="持续保持代码的健康"></a>持续保持代码的健康</h3><blockquote><p>The primary purpose of code review is to make sure that the overall code health of  code base is improving over time. All of the tools and processes of code review are designed to this end.</p></blockquote><p>上面是google对CodeReview目的的定义，这个定义太宽泛但并不是没有意义，他给我们指出了一个CodeReview需要解决的主要的问题。<br>在敏捷开发实践的整个过程中，十分让人头疼的就是代码持续腐化。互联网企业的敏捷开发，部门的生存，产品的立足，快速推出可用功能对一个团队来说至关重要，同时带来的问题，代码快速进入老年期，经过版本迭代，修改，跟时间妥协的产物以及接手人员的迁移，代码急速腐败不堪。但代码也不能不往前推进，在敏捷开发尤其是虽然在敏捷开发和建模领域，有重构三板斧，领域模型的扩展演进迭代，代码、模块、业务级别的重构模型和基于测试驱动的持续集成，但考虑到实施成本，CodeReview可能是解决这个问题的的一个很好的实践，下面是google文档的描述</p><blockquote><p>First, developers must be able to make progress on their tasks. If you never submit an improvement to the codebase, then the codebase never improves. Also, if a reviewer makes it very difficult for any change to go in, then developers are disincentivized to make improvements in the future.<br>On the other hand, it is the duty of the reviewer to make sure that each CL is of such a quality that the overall code health of their codebase is not decreasing as time goes on. This can be tricky, because often, codebases degrade through small decreases in code health over time, especially when a team is under significant time constraints and they feel that they have to take shortcuts in order to accomplish their goals.</p></blockquote><p>健康没有明确的定义，这个宽泛的概念落地的过程是一个平衡的过程，一方面卡的太严，必然影响效率和开发无法推进，实践过程中确实遇到了这么样的问题，比如团队新人接手，不知道原团队已经达成的部分共识，加上部分团队忽视CodeReview过程中共识沉淀，开始开发几乎无法推进，所以下一条中提到的知识共享后的共识沉淀成开发规范文档非常重要；另一方面，确保代码健康是reviewer的责任，确保不让小的不健康的CL最后累计成代码库的健康整体下降，保障吃进去的每一口代码都是卫生有机的，不允许不健康的代码被接受。这里google给出了一个总的实践原则：</p><blockquote><p><strong>In general, reviewers should favor approving a CL once it is in a state where it definitely improves the overall code health of the system being worked on, even if the CL isn’t perfect.</strong></p></blockquote><p>两层含义</p><ul><li>不要要求代码是perfect的，没有perfect的代码，只有better的代码。在敏捷开发过程中，reviewer应该接受持续改进的代码，不应该因为追求一步到位的代码阻塞开发进程。</li><li>必须在代码健康维度，应该对当前系统做增量，代码健康可以分为四个维度<ul><li>代码可读性</li><li>代码可维护性</li><li>代码的逻辑直观性</li><li>团队约定的规范</li></ul></li></ul><p>下面是google文档里提供的4个参考原则</p><blockquote><p>Technical facts and data overrule opinions and personal preferences.<br>遵循技术事实和数据代替个人观点和个人偏好<br>On matters of style, the style guide is the absolute authority. Any purely style point (whitespace, etc.) that is not in the style guide is a matter of personal preference. The style should be consistent with what is there. If there is no previous style, accept the author’s.<br>建立样式文档，编码规范，必须遵循文档规范，如果没有文档规范遵循原有上下文的代码规范，如果没有的就接受developer的代码<br>Aspects of software design are almost never a pure style issue or just a personal preference. They are based on underlying principles and should be weighed on those principles, not simply by personal opinion. Sometimes there are a few valid options. If the author can demonstrate (either through data or based on solid engineering principles) that several approaches are equally valid, then the reviewer should accept the preference of the author. Otherwise the choice is dictated by standard principles of software design.<br>遵循基本设计原则<br>If no other rule applies, then the reviewer may ask the author to be consistent with what is in the current codebase, as long as that doesn’t worsen the overall code health of the system.<br>与当前代码库保持一致</p></blockquote><p><a name="Uks3Z"></a></p><h3 id="建设工程师文化"><a href="#建设工程师文化" class="headerlink" title="建设工程师文化"></a>建设工程师文化</h3><blockquote><p>Code review can have an important function of teaching developers something new about a language, a framework, or general software design principles. It’s always fine to leave comments that help a developer learn something new. Sharing knowledge is part of improving the code health of a system over time. Just keep in mind that if your comment is purely educational, but not critical to meeting the standards described in this document, prefix it with “Nit: “ or otherwise indicate that it’s not mandatory for the author to resolve it in this CL.</p></blockquote><p>CodeReview也是团队建设的一个很好的途径，CodeReview中，reviewer 和developer不是对立的，而是互助、沟通、协作和学习的过程。团队形成互助、互学的气氛，既能互相增长团队的知识和经验，还能把产品做得更好，提高reviewer的表达和developer吸收新知识。</p><blockquote><p>这也是很容易被忽略的一个很重要的目的。敏捷开发是一个中央集中控制到个体发挥积极性的过程，中央集中控制的优点就是有统一的视图和控制，经常开大会，开长会，这样知识和经验也较容易集中。敏捷开发中，分散在两个Scrum Team的开发人员之间，如果没有好的机制，相互沟通也会相对较少，造成知识和好的经验无法在整个团队传播。<br>笔者参加的项目中就碰到了类似情况， 当时我们整个团队分成三个Scrum Team，其中一个Scrum Team负责一个Eclipse 工具的开发， 其中用到的一些功能和知识在其他ScrumTeam上以前都有涉及过。当时负责开发的同事非常优秀而且能力突出，但由于不知道其他 Scrum Team同事有这方面的经验，没有很好地分享以往好的经验和知识，以至于最后导致浪费了一些学习的成本。</p></blockquote><p>CodeReview是一个学习和享受的过程，一个开发人员的能力有限，而CodeReview正是这样的一种机制，让好的知识、设计在团队中分享，实现整体团队的成长和整体的效益最大化。但这要求为团队提供条件，让尽量多的人能参与CodeReview实践中。</p><blockquote><p>Code Review协作过程：<br>a）先由代码的开发人员向检查人员进行大体的介绍，包括设计思想、数据结构、程序代码结构介绍等。<br>b）双方进行讨论、交流。<br>c）检查人员单独进一步进行Code Review，并记录Review结果和建议。<br>d）由检查人员和开发人员一起，检查人员反馈Code Review结果，并和开发人员一起讨论改进方法，重构。<br>e）最后把可重用的Code Review的经验总结编码规范。便于整个团队复用经验。</p></blockquote><p>这个过程中，需要将共识的经验总结成编码规范落成文档容易被遗漏，避免在CodeReview过程中不必要的冲突。<br><a name="s8GUg"></a></p><h3 id="及早发现潜在缺陷与-BUG，降低事故成本"><a href="#及早发现潜在缺陷与-BUG，降低事故成本" class="headerlink" title="及早发现潜在缺陷与 BUG，降低事故成本"></a>及早发现潜在缺陷与 BUG，降低事故成本</h3><p>很多团队在进行CodeReview的目的是为了避免bug的产生，作为代码质量的一种手段，有线上bug，reviewer跟developer同责任。其实有过CodeReview实践的同学都有一个共识，CodeReview并不能避免bug，甚至不是一种有效减少bug的手段。所以避免bug，将CodeReview作为一种质量保障过程，不是一个好的实践。<br>如果reviewer需要对于代码中的业务逻辑负责，会出现团队里能review代码的很少，CodeReview参与度越来越少的局面，违背了CodeReview的团队参与，代码协作的根本目的。更详细的讨论可以参见引用文档</p><blockquote><p>发现代码中的业务逻辑错误<br>业务逻辑指的是代码开发的功能是否符合业务需求，如一个加法函数，检查其是否真的实现了加法的功能。<br>笔者了解的一些敏捷团队中，把发现代码的业务逻辑错误当做目标和内容，但往往效果都不是很好，基本都是从形式上泛泛检查一番。原因有两个：<br>1．业务逻辑的检查是从需求到代码的全方位检查，需要花费大量时间，投入产出比失衡。<br>2．业务逻辑的检查和业务需求紧密关联，已经超出了检查人员的能力范围（一般Code Review是开发人员，不是业务人员）。<br>笔者认为，发现逻辑错误，不应该是Code Review 的目的和内容。应该是Unit Test，功能测试，集成测试的目的。从投入产出比考虑，不应该花费太多时间在Code Review 阶段去进行逻辑错误检查。</p></blockquote><p>代码中的逻辑，除了业务逻辑，还应该包括技术逻辑。技术逻辑就是实现逻辑， 比如数据库连接打开是否忘记关闭，是否正确使用线程，Exception 处理，密码是否加密存储，并发锁是否在所有分支释放等。虽然发现代码错误不是CodeReview的主要职责，CodeReviewe不能代替测试。但是可以把这些最常出现错误的地方，而且是测试不容易发现的地方，作为Code中的“地雷区”。这些“地雷区”在CodeReview中是值得花费一些时间进行维护和检查的。建议，在整个团队中维护并共享“地雷区”注意事项列表，以及统一的处理方式和机制。并在编码和CodeReview过程中都按照团队的最佳实践进行。也可以用代码规约工具和bug finder工具扫描。在一定程度上降低这些bug带来的事故成本。<br><a name="h2Lye"></a></p><h2 id="CodeReview我们应该找什么"><a href="#CodeReview我们应该找什么" class="headerlink" title="CodeReview我们应该找什么"></a>CodeReview我们应该找什么</h2><p>先把google的建议checklist放出来参考</p><blockquote><ul><li>The code is well-designed.</li><li>The functionality is good for the users of the code.</li><li>Any UI changes are sensible and look good.</li><li>Any parallel programming is done safely.</li><li>The code isn’t more complex than it needs to be.</li><li>The developer isn’t implementing things they might need in the future but don’t know they need now.</li><li>Code has appropriate unit tests.</li><li>Tests are well-designed.</li><li>The developer used clear names for everything.</li><li>Comments are clear and useful, and mostly explain why instead of what.</li><li>Code is appropriately documented (generally in g3doc).</li><li>The code conforms to our style guides.</li></ul></blockquote><p><a name="uZNxA"></a></p><h2 id="不可避免的冲突"><a href="#不可避免的冲突" class="headerlink" title="不可避免的冲突"></a>不可避免的冲突</h2><p>在CodeReview过程中，冲突是不可避免的，每个人的职责不同，角度不同，重点不同都会做不同取舍，一个常见的情况，一个developer对修改的代码完成度相对较低最小实现完成即可，但对于一个项目管理成员来说希望修改有比较高的完成度最好整条链路梳理一遍。不违背前节原则的情况下，为了不影响整个代码往前推进，reviewer应该接受这样的代码，但也应该让reviewer有自由评论的权限，有一个好的实践是可以把review评论分成必须修改非必须修改两部分，在上述原则的前提下，认为有better的实现的代码可以标记成非必须修改review评论来给developer提供建议，这样既有利于知识的分享传播也不会产生不必要的冲突阻塞开发进程。<br>还有一个好的实践，当冲突发生时，我们在讨论代码的时候，参照stack overflow的原则，陈述观点是应该基于事实、资料文档、专业知识、数据不应该只发表观点。</p><blockquote><p>Many good questions generate some degree of opinion based on expert experience, but answers to this question will tend to be almost entirely based on opinions, rather than facts, references, or specific expertise.</p></blockquote><p><a name="PMyrz"></a></p><h2 id="流程和工具"><a href="#流程和工具" class="headerlink" title="流程和工具"></a>流程和工具</h2><p>PULLREQUEST：<a href="https://www.jianshu.com/p/c7a16bd17b17" target="_blank" rel="noopener">https://www.jianshu.com/p/c7a16bd17b17</a><br>AONE：<a href="https://www.atatech.org/articles/130692?spm=ata.13269325.0.0.2bde49faR9EhMf" target="_blank" rel="noopener">https://www.atatech.org/articles/130692?spm=ata.13269325.0.0.2bde49faR9EhMf</a><br><a name="11"></a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://google.github.io/eng-practices/review/reviewer/" target="_blank" rel="noopener">How to do a code review</a><br><a href="https://google.github.io/eng-practices/review/reviewer/standard.html" target="_blank" rel="noopener">The Standard of Code Review</a><br><a href="https://google.github.io/eng-practices/review/reviewer/looking-for.html" target="_blank" rel="noopener">What to look for in a code review</a><br><a href="https://google.github.io/eng-practices/review/developer/handling-comments.html" target="_blank" rel="noopener">How to handle reviewer comments</a><br>敏捷开发中的Code Review:《程序员》杂志<br>持续集成：《敏捷开发知识体系》<br><a href="https://www.jianshu.com/p/f79c4e948954" target="_blank" rel="noopener">CodeReview规范</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a name=&quot;8f9rJ&quot;&gt;&lt;/a&gt;&lt;br&gt;在敏捷开发实践中，CodeReview作为代码检查过程中比较重要的一个环节，在各团队里都有不错的实践。打算结合自己团队的实践写一篇关于CodeReview完整的最佳实践的建议，发现周末时间不够，就改成CodeReview实践中
      
    
    </summary>
    
    
      <category term="敏捷开发实践,codereview" scheme="http://KENTHD8mg.github.io/categories/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5-codereview/"/>
    
    
      <category term="敏捷开发实践" scheme="http://KENTHD8mg.github.io/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://KENTHD8mg.github.io/2019/09/30/hello-world/"/>
    <id>http://KENTHD8mg.github.io/2019/09/30/hello-world/</id>
    <published>2019-09-29T18:47:45.000Z</published>
    <updated>2019-09-29T18:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
